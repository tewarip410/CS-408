<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <link href="../../public/css/tourist-map.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <script>
      $(function () {
        $(window).click(function (){
          $('#navbar').addClass('bug');
        });
      });
      function initAutocomplete() {
        var geocoder = new google.maps.Geocoder;
        var infowindow = new google.maps.InfoWindow;

        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 39.768403, lng: -86.15806800000001},
          zoom: 5,
          mapTypeId: 'roadmap',
          disableDefaultUI: true,
          zoomControl: true,
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }

            var latlng = {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()};
            geocoder.geocode({'location': latlng}, function(results, status) {
              if (status === 'OK') {
                if (results[0]) {
                  var marker = new google.maps.Marker({
                    map: map,
                    title: place.name,
                    position: place.geometry.location
                  });
                  var infowindow = new google.maps.InfoWindow({
                    content: place.name + '<br>' + results[0].formatted_address
                  });
                  markers.push(marker);
                  marker.addListener('click', function() {
                    infowindow.open(map, marker);
                  });
                }
              }
            });

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSLS-ZfjeiocBavx558otEEutNVgrwF4Y&libraries=places&callback=initAutocomplete"
    async defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
  </body>
</html>