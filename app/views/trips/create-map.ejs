    <script>
      var locations = [];
    </script>
    <style>
      .map-controls {
        width: 250px;
      }
    </style>

    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div class="outer-map">
      <div id="map"></div>
      <div class="btn-container">
        <!--  -->
        <!-- <button id="submit" type="button" class="btn btn-outline-warning">Enter Coordinates</button> -->
        <input id="submit" type="button" class="btn my-outline-primary map-controls" data-toggle="modal" data-target="#coordinatesModal" value="Enter Coordinates">
        <input onclick="deleteMarkers();" type=button class="btn my-outline-primary map-controls" value="Delete All Markers">
        <input onclick="submitMarkers();" type=button class="btn my-primary map-controls" id="continuebutton" value="Continue">
      </div>
    </div>

    <!-- MODAL FOR ENTER COORDINATES -->
    <div class="modal fade" id="coordinatesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content text-center modal-center">

          <div class="modal-bottom">
              <h3 class="mt-2 mb-5">Enter a pair of coordinates</h3>
              <div class="row">
                <div class="col-8 ml-3 ">
                  <input id="latlng" class="form-control d-inline" type="text" placeholder="latitude, longitude">
                </div>
              </div>
                <div class="row text-center">
                  <div class="col-3 ml-2 w-100">
                    <button type="button" id="addCoordBtn" class="btn btn-primary">Add</button>
                  </div>
                  <div class="col-3 w-100 text-center">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                  </div>
                </div>
            </div>
          </div>

        </div>

      </div>
    </div>




    <% if (locals.prev_locations && prev_locations.location_data) { %>
      <% prev_locations.location_data.forEach((obj) => { %>
        <script>
          locations.push([<%- obj[2] %>, <%- obj[1] %>]);
        </script>
      <% }) %>
    <% } %>
    <script>
      // In the following example, markers appear when the user clicks on the map.
      // The markers are stored in an array.
      // The user can then click an option to hide, show or delete the markers.
      var map;
      var markers = [];

      function initAutocomplete() {
        var geocoder = new google.maps.Geocoder;
        var infowindow = new google.maps.InfoWindow;

        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 39.768403, lng: -86.15806800000001},
          zoom: 5,
          mapTypeId: 'roadmap',
          disableDefaultUI: true,
          zoomControl: true,
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        $('#addCoordBtn').click(function() {
          geocodeLatLng(geocoder, map, infowindow);
        })

        // This event listener will call addMarker() when the map is clicked.
        map.addListener('click', function(event) {
          addMarker(event.latLng, geocoder, map);
        });

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            var latlng = {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()};
            geocoder.geocode({'location': latlng}, function(results, status) {
              if (status === 'OK') {
                if (results[0]) {
                  var marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    title: results[0].formatted_address
                  });
                  var infowindow = new google.maps.InfoWindow({
                    content: results[0].formatted_address
                  });
                  infowindow.open(map, marker);
                  markers.push(marker);
                  marker.addListener('click', function(event) {
                    delMarker(marker.position.lat(), marker.position.lng());
                  });
                }
              }
            });

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });

        for (var j = 0; j < locations.length; j++) {
          addPrevMarker(locations[j][0], locations[j][1], geocoder, map);
        }
      }

      function geocodeLatLng(geocoder, map, infowindow) {
        var input = document.getElementById('latlng').value;
          var latlngStr = input.split(',', 2);
          var latlng = {lat: parseFloat(latlngStr[1]), lng: parseFloat(latlngStr[0])};
          geocoder.geocode({'location': latlng}, function(results, status) {
            if (status === 'OK') {
              if (results[0]) {
                map.setZoom(11);
                var marker = new google.maps.Marker({
                  position: latlng,
                  map: map,
                  title: results[0].formatted_address
                });
                var infowindow = new google.maps.InfoWindow({
                    content: results[0].formatted_address
                });
                infowindow.open(map, marker);
                markers.push(marker);
                markers.push(marker);
                marker.addListener('click', function(event) {
                  delMarker(marker.position.lat(), marker.position.lng());
                });
              } else {
                window.alert('No results found');
              }
            } else {
              window.alert('Geocoder failed due to: ' + status);
            }
          });
      }

      // Adds a marker to the map and push to the array.
      function addMarker(location, geocoder, map) {
        var latlng = {lat: location.lat(), lng: location.lng()};
        geocoder.geocode({'location': latlng}, function(results, status) {
          if (status === 'OK') {
            if (results[0]) {
              var marker = new google.maps.Marker({
                position: latlng,
                map: map,
                title: results[0].formatted_address
              });
              var infowindow = new google.maps.InfoWindow({
                  content: results[0].formatted_address
              });
              infowindow.open(map, marker);
              markers.push(marker);
              marker.addListener('click', function(event) {
                delMarker(marker.position.lat(), marker.position.lng());
              });
            }
          }
        });
      }

      function addPrevMarker(lat, lng, geocoder, map) {
        var latlng = {lat: lat, lng: lng};
        geocoder.geocode({'location': latlng}, function(results, status) {
          if (status === 'OK') {
            if (results[0]) {
              var marker = new google.maps.Marker({
                position: latlng,
                map: map,
                title: results[0].formatted_address
              });
              var infowindow = new google.maps.InfoWindow({
                  content: results[0].formatted_address
              });
              infowindow.open(map, marker);
              markers.push(marker);
              marker.addListener('click', function(event) {
                delMarker(marker.position.lat(), marker.position.lng());
              });
            }
          }
        });
      }

      var delMarker = function (lat, lng) {
        for (var i = 0; i < markers.length; i++) {
          if (markers[i].position.lat() === lat && markers[i].position.lng() === lng) {
            markers[i].setMap(null);
            markers.splice(i, 1);
          }
        }
      }

      // Sets the map on all markers in the array.
      function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers() {
        //setMapOnAll(null);
      }

      // Shows any markers currently in the array.
      function showMarkers() {
        setMapOnAll(map);
      }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers() {
        clearMarkers();
        markers = [];
        html = "";
        $('#form-container').html(html);
      }

      function submitMarkers() {
        var location_data = [];

        for (var i = 0; i < markers.length; i++) {
          if (markers[i] !== null) {
            var data = [markers[i].title, markers[i].position.lat(), markers[i].position.lng(), i];
            location_data.push(data);
          }
        }

        if (location_data == 0) {
          location_data[0] = null;
        }

        $.ajax({
          url: '/trips',
          type: 'POST',
          data: {location_data},
          success: function(data) {
            window.location.pathname = "trips/create/details";
          }
        });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSLS-ZfjeiocBavx558otEEutNVgrwF4Y&libraries=places&callback=initAutocomplete"
    async defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
