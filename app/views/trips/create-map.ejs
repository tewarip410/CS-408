    <div id="floating-panel">
      <input id="latlng" type="text">
      <input id="submit" type="button" value="Enter Coordinates">
      <input onclick="deleteMarkers();" type=button value="Delete Markers">
      <input onclick="submitMarkers();" type=button value="Finish">
    </div>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <script>
      // In the following example, markers appear when the user clicks on the map.
      // The markers are stored in an array.
      // The user can then click an option to hide, show or delete the markers.
      var map;
      var markers = [];

      function initAutocomplete() {
        var geocoder = new google.maps.Geocoder;
        var infowindow = new google.maps.InfoWindow;

        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 39.768403, lng: -86.15806800000001},
          zoom: 5,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // This event listener will call addMarker() when the map is clicked.
        map.addListener('click', function(event) {
          addMarker(event.latLng, geocoder, map);
        });

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            var latlng = {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()};
            geocoder.geocode({'location': latlng}, function(results, status) {
              if (status === 'OK') {
                if (results[0]) {
                  var marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    title: results[0].formatted_address
                  });
                  markers.push(marker);
                }
              }
            });

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });

        document.getElementById('submit').addEventListener('click', function() {
          geocodeLatLng(geocoder, map, infowindow);
        });
      }

      function geocodeLatLng(geocoder, map, infowindow) {
        var input = document.getElementById('latlng').value;
        if (input != '') {
          var latlngStr = input.split(',', 2);
          var latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};
          geocoder.geocode({'location': latlng}, function(results, status) {
            if (status === 'OK') {
              if (results[0]) {
                map.setZoom(11);
                var marker = new google.maps.Marker({
                  position: latlng,
                  map: map,
                  title: results[0].formatted_address
                });
                markers.push(marker);
                infowindow.setContent(results[0].formatted_address);
                infowindow.open(map, marker);
              } else {
                window.alert('No results found');
              }
            } else {
              window.alert('Geocoder failed due to: ' + status);
            }
          });
        }
      }

      // Adds a marker to the map and push to the array.
      function addMarker(location, geocoder, map) {
        var latlng = {lat: location.lat(), lng: location.lng()};
        geocoder.geocode({'location': latlng}, function(results, status) {
          if (status === 'OK') {
            if (results[0]) {
              var marker = new google.maps.Marker({
                position: latlng,
                map: map,
                title: results[0].formatted_address
              });
              var index = markers.length;
              markers.push(marker);
              marker.addListener('click', function(event) {
                delMarker(index);
              });
            }
          }
        });
        
      }

      var delMarker = function (id) {
        marker = markers[id];
        marker.setMap(null);
        delete markers[id];
        console.log(markers);
      }

      // Sets the map on all markers in the array.
      function setMapOnAll(map) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(map);
        }
      }

      // Removes the markers from the map, but keeps them in the array.
      function clearMarkers() {
        setMapOnAll(null);
      }

      // Shows any markers currently in the array.
      function showMarkers() {
        setMapOnAll(map);
      }

      // Deletes all markers in the array by removing references to them.
      function deleteMarkers() {
        clearMarkers();
        markers = [];
        html = "";
        $('#form-container').html(html);
      }

      function submitMarkers() {
        var location_data = [];
        
        for (var i = 0; i < markers.length; i++) {
          var data = [markers[i].title, markers[i].position.lat(), markers[i].position.lng()];
          location_data.push(data);
        }

        $.ajax({
          url: '/trips',
          type: 'POST',
          data: {location_data},
          success: function(data) {
            window.location.pathname = "trips/create/details";
          }
        });
      }

      $('#datepicker').datepicker({
        autoclose: true,
        todayHighlight: true,
      });
      $('#datepicker').datepicker("setDate", new Date());
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSLS-ZfjeiocBavx558otEEutNVgrwF4Y&libraries=places&callback=initAutocomplete"
    async defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>